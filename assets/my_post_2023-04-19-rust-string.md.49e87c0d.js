import{_ as s,o as n,c as a,V as l}from"./chunks/framework.16eef3c0.js";const o="/assets/rust-string.295c1951.jpg",d=JSON.parse('{"title":"Rust中的字符串","description":"","frontmatter":{"layout":"post","title":"Rust中的字符串","date":"2023-04-19 23:00:00 +0800"},"headers":[],"relativePath":"my/post/2023-04-19-rust-string.md"}'),p={name:"my/post/2023-04-19-rust-string.md"},t=l('<h2 id="_1-string、-string、str、-str" tabindex="-1">1. String、&amp;String、str、&amp;str <a class="header-anchor" href="#_1-string、-string、str、-str" aria-label="Permalink to &quot;1. String、&amp;String、str、&amp;str&quot;">​</a></h2><p>从本质上来说，Rust中只有一种字符串，就是<code>str</code>，而<code>String</code>只不过是基于<code>str</code>的一个结构体。具体关系参考下图：</p><p><img src="'+o+`" alt=""></p><ul><li><code>str</code>可以认为是分配在堆上的数据，本质上是是一个<code>Vec&lt;u8&gt;</code></li><li><code>&amp;str</code>是对<code>str</code>的一个引用，是字符串切片。本质上是一个胖指针，除了引用地址外，额外多了一个属性表示字符串长度</li><li><code>String</code>是一个结构体，包含三部分：指针、长度、容量</li><li><code>&amp;String</code>是对<code>String</code>的一个引用，是一个普通指针</li></ul><p>此外，值得了解的是：</p><ul><li>字符串字面量的类型为<code>&amp;str</code>，且具有<code>&#39;static</code>的生命周期，即<code>&amp;&#39;static str</code></li><li>通常我们使用的是<code>String</code>、<code>&amp;String</code>或<code>&amp;str</code>，一般不会直接使用<code>str</code></li></ul><h2 id="_2-转换" tabindex="-1">2. 转换 <a class="header-anchor" href="#_2-转换" aria-label="Permalink to &quot;2. 转换&quot;">​</a></h2><p><code>String</code>和<code>&amp;str</code>之间的相互转换，参考如下示例：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // &amp;str</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to_string</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // &amp;str -&gt; String</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">capacity</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // String</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">capacity</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">as_str</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // String -&gt; &amp;str</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s4</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s5 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">s3</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">..];</span><span style="color:#676E95;font-style:italic;">    // String -&gt; &amp;str</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://blog.thoughtram.io/string-vs-str-in-rust/" target="_blank" rel="noreferrer">String vs &amp;str in Rust</a></li></ul>`,11),e=[t];function r(c,F,D,y,i,A){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
