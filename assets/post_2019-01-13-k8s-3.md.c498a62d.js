import{_ as s,o as a,c as n,V as l}from"./chunks/framework.16eef3c0.js";const A=JSON.parse('{"title":"k8s学习笔记(3)——Pod","description":"","frontmatter":{"layout":"post","title":"k8s学习笔记(3)——Pod","date":"2019-01-13 23:50:00 +0800"},"headers":[],"relativePath":"post/2019-01-13-k8s-3.md"}'),o={name:"post/2019-01-13-k8s-3.md"},e=l(`<h2 id="一、pod定义" tabindex="-1">一、Pod定义 <a class="header-anchor" href="#一、pod定义" aria-label="Permalink to &quot;一、Pod定义&quot;">​</a></h2><p><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noreferrer">官网文档</a>对Pod的定义是：</p><blockquote><p>A Pod is the basic building block of Kubernetes–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents a running process on your cluster.</p></blockquote><p>Pod的基本特点有：</p><ul><li>Pod其实是对容器的一层包装，每个Pod内可以包含一个或者多个容器</li><li>Pod内的容器共享网络和存储，互相之间可以通过<code>localhost</code>来进行通信</li><li>Pod是非持久的、一次性的 (ephemeral, disposable)</li><li>Pod不会自愈，当一个Pod失败后，会被删除</li><li>Controller用于管理Pod，对Pod进行调度，复本管理，滚动升级等</li><li>很少直接使用Pod，一般都是通过Controller来使用</li><li>Pod template也通常不直接使用，而是放在Controller template里</li></ul><h2 id="二、pod生命周期" tabindex="-1">二、Pod生命周期 <a class="header-anchor" href="#二、pod生命周期" aria-label="Permalink to &quot;二、Pod生命周期&quot;">​</a></h2><p>Pod的生命周期状态由Pod的status来反映，有以下几种：</p><ul><li><code>Pending</code>：尚未调度，镜像在下载中</li><li><code>Running</code>：被调度到一个节点上，其中至少一个容器还在运行中，启动中或者重启中</li><li><code>Succeeded</code>：所有容器运行成功然后终止，且不会重启</li><li><code>Failed</code>：所有容器已经终止运行，且至少有一个容器失败而终止</li><li><code>Unknow</code>：状态未知</li></ul><h2 id="三、探针-probes" tabindex="-1">三、探针(probes) <a class="header-anchor" href="#三、探针-probes" aria-label="Permalink to &quot;三、探针(probes)&quot;">​</a></h2><p>kubelet会定期对容器进行健康检查，健康检查使用的就是探针，探针类型有以下三种：</p><ul><li>执行一个命令，如果返回值是0，则认为成功</li><li>TCP检测端口是否可以连通</li><li>发起一个HTTP GET请求，如果状态码在<code>[200, 400)</code>之间，则认为成功</li></ul><p>探针检测的结果有以下三种：</p><ul><li>Success</li><li>Failure</li><li>Unknown</li></ul><p>目前支持的检测有两种：</p><ul><li><code>livenessProbe</code>：检测容器是否运行，通常结合Pod的<code>restartPolicy</code>来使用，用于判断什么时候应当重启容器来自愈</li><li><code>readinessProbe</code>：检测容器是否ready，如果检测成功，则会将该Pod加入到Service的负载均衡池中，开始对外提供服务</li></ul><p>下面是一个livenessProbe的例子，创建文件liveness.yml，内容如下：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Pod</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">liveness-demo</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">containers</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">liveness</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">busybox</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/sh</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">livenessProbe</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">exec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cat</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/tmp/healthy</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">initialDelaySeconds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">periodSeconds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span></code></pre></div><p>然后执行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">liveness.yml</span></span></code></pre></div><p>然后执行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pods</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span></span></code></pre></div><p>可以看到Pod在不断重启：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NAME            READY     STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#A6ACCD;">liveness-demo   1/1       Running   1          2m</span></span>
<span class="line"><span style="color:#A6ACCD;">liveness-demo   1/1       Running   2         2m</span></span>
<span class="line"><span style="color:#A6ACCD;">liveness-demo   1/1       Running   3         4m</span></span>
<span class="line"><span style="color:#A6ACCD;">liveness-demo   1/1       Running   4         5m</span></span>
<span class="line"><span style="color:#A6ACCD;">liveness-demo   1/1       Running   5         6m</span></span></code></pre></div>`,23),p=[e];function t(c,r,i,C,y,d){return a(),n("div",null,p)}const F=s(o,[["render",t]]);export{A as __pageData,F as default};
