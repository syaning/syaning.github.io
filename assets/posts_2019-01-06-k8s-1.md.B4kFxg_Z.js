import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.C7_4Vmd4.js";const n="/assets/k8s-cluster.rbrefQdr.svg",u=JSON.parse('{"title":"k8s学习笔记(1)——基本概念","description":"","frontmatter":{"doctype":"post","title":"k8s学习笔记(1)——基本概念","date":"2019-01-06 23:50:00 +0800"},"headers":[],"relativePath":"posts/2019-01-06-k8s-1.md","filePath":"posts/2019-01-06-k8s-1.md"}'),t={name:"posts/2019-01-06-k8s-1.md"},l=e(`<h2 id="一、安装k8s" tabindex="-1">一、安装k8s <a class="header-anchor" href="#一、安装k8s" aria-label="Permalink to &quot;一、安装k8s&quot;">​</a></h2><p>参考 <a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noreferrer">Creating a single master cluster with kubeadm</a></p><h3 id="_1-安装-kubeadm-kubelet和kubectl" tabindex="-1">1. 安装 kubeadm，kubelet和kubectl <a class="header-anchor" href="#_1-安装-kubeadm-kubelet和kubectl" aria-label="Permalink to &quot;1. 安装 kubeadm，kubelet和kubectl&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://packages.cloud.google.com/apt/doc/apt-key.gpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apt-key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/apt/sources.list.d/kubernetes.list</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  deb https://apt.kubernetes.io/ kubernetes-xenial main</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$ sudo apt-get update</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$ sudo apt-get install kubeadm kubelet kubectl</span></span></code></pre></div><h3 id="_2-禁用swap" tabindex="-1">2. 禁用swap <a class="header-anchor" href="#_2-禁用swap" aria-label="Permalink to &quot;2. 禁用swap&quot;">​</a></h3><p>参考 <a href="https://askubuntu.com/questions/214805/how-do-i-disable-swap" target="_blank" rel="noreferrer">How do I disable swap?</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/ swap / s/^\\(.*\\)$/#\\1/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/fstab</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swapoff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><h3 id="_3-初始化master节点" tabindex="-1">3. 初始化master节点 <a class="header-anchor" href="#_3-初始化master节点" aria-label="Permalink to &quot;3. 初始化master节点&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pod-network-cidr=192.168.0.0/16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --apiserver-advertise-address=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">your_ip_address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># e.g. sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=10.10.23.114</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Your Kubernetes master has initialized successfully!</span></span>
<span class="line"><span></span></span>
<span class="line"><span>To start using your cluster, you need to run the following as a regular user:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  mkdir -p $HOME/.kube</span></span>
<span class="line"><span>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span>
<span class="line"><span>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span>
<span class="line"><span></span></span>
<span class="line"><span>You should now deploy a pod network to the cluster.</span></span>
<span class="line"><span>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span></span>
<span class="line"><span>  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>You can now join any number of machines by running the following on each node</span></span>
<span class="line"><span>as root:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  kubeadm join 10.10.23.114:6443 --token 8fssei.60vi31sjkpoinj4w --discovery-token-ca-cert-hash sha256:3b460e190cfbc9ad2cf7d3900559871efb831e252b6b8e5452a01a875229a3d7</span></span></code></pre></div><p>继续执行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/kubernetes/admin.conf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span></code></pre></div><h3 id="_4-安装网络插件" tabindex="-1">4. 安装网络插件 <a class="header-anchor" href="#_4-安装网络插件" aria-label="Permalink to &quot;4. 安装网络插件&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span></span></code></pre></div><h3 id="_5-查看" tabindex="-1">5. 查看 <a class="header-anchor" href="#_5-查看" aria-label="Permalink to &quot;5. 查看&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span></code></pre></div><p>输出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NAME          STATUS   ROLES    AGE   VERSION</span></span>
<span class="line"><span>desktop-280   Ready    master   11m   v1.13.0</span></span></code></pre></div><p>如果通过 <code>kubectl get pods --all-namespaces</code> 发现有 coredns 报错：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NAMESPACE     NAME                           READY   STATUS             RESTARTS   AGE</span></span>
<span class="line"><span>kube-system   pod/coredns-86c58d9df4-ccwhd   0/1     CrashLoopBackOff   6          9m57s</span></span>
<span class="line"><span>kube-system   pod/coredns-86c58d9df4-t9gvs   0/1     CrashLoopBackOff   6          9m57s</span></span></code></pre></div><p>参考 <a href="https://askubuntu.com/questions/627899/nameserver-127-0-1-1-in-resolv-conf-wont-go-away/627900#627900" target="_blank" rel="noreferrer">nameserver 127.0.1.1 in resolv.conf won&#39;t go away!</a></p><p>首先编辑 <code>/etc/NetworkManager/NetworkManager.conf</code>，注释 <code>dns=dnsmasq</code> 这一行，然后执行 <code>sudo service network-manager restart</code>，然后查看 <code>/etc/resolv.conf</code>, 如果有 <code>nameserver 127.0.0.1</code> 这一行，则注释掉。</p><p>然后执行 <code>sudo kubeadm reset -f</code>，再重新执行上述步骤初始化master节点即可。</p><h2 id="二、基本概念" tabindex="-1">二、基本概念 <a class="header-anchor" href="#二、基本概念" aria-label="Permalink to &quot;二、基本概念&quot;">​</a></h2><p>该部分内容可参考：</p><ul><li><a href="https://kubernetes.io/docs/concepts/" target="_blank" rel="noreferrer">Concepts</a></li><li><a href="http://omerio.com/2015/12/18/learn-the-kubernetes-key-concepts-in-10-minutes/" target="_blank" rel="noreferrer">Learn the Kubernetes Key Concepts in 10 Minutes</a></li><li><a href="https://medium.com/yld-engineering-blog/kubernetes-core-concepts-324ea7028c29" target="_blank" rel="noreferrer">Kubernetes: Core Concepts</a></li></ul><p>k8s集群的基本结构可以参考下图：</p><p><img src="`+n+`" alt=""></p><blockquote><p>图片来源 <a href="http://omerio.com/2015/12/18/learn-the-kubernetes-key-concepts-in-10-minutes/" target="_blank" rel="noreferrer">http://omerio.com/2015/12/18/learn-the-kubernetes-key-concepts-in-10-minutes/</a></p><p>注：图中 master 节点的 Replication Controller，现在是 Controller Manager</p></blockquote><h3 id="_1-master-node" tabindex="-1">1. Master, Node <a class="header-anchor" href="#_1-master-node" aria-label="Permalink to &quot;1. Master, Node&quot;">​</a></h3><p>Master 节点主要运行的是：</p><ul><li>kube-apiserver：提供 RESTful API。kubectl 等工具以及其它组件通过 apiserver 来管理集群内的各种资源</li><li>kube-controller-manager</li><li>kube-scheduler</li></ul><p>Node 节点主要运行的是：</p><ul><li>kubelet：与master节点进行通信</li><li>kube-proxy：网络通信</li></ul><h3 id="_2-pod" tabindex="-1">2. Pod <a class="header-anchor" href="#_2-pod" aria-label="Permalink to &quot;2. Pod&quot;">​</a></h3><p>Pod是k8s集群调度的最小工作单元，通常是由一个容器或者多个共同工作的容器组成。最常见的模式是一个Pod内有一个容器，在这种情况下，可以把Pod简单理解为对容器的一层包装，k8s直接管理的是Pod，而不是容器。如果一个Pod内有多个容器，那么这些容器应当是紧密关联共同协作的。</p><p>每个Pod有一个唯一的IP，并且可以挂载若干个Volume，Pod内的容器共享网络资源和存储资源，它们之间可以直接使用localhost来进行通信。</p><p>Pod的模板定义为：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myapp-pod</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myapp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  containers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myapp-container</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">busybox</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echo Hello Kubernetes! &amp;&amp; sleep 3600&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="_3-service" tabindex="-1">3. Service <a class="header-anchor" href="#_3-service" aria-label="Permalink to &quot;3. Service&quot;">​</a></h3><p>Pod会被创建或者销毁，销毁后重新创建的Pod是一个新的Pod，IP也会发生变化。因此通过Pod的IP直接访问Pod是不现实的。因此在Pod之上加了一层Service，用户通过访问Service来访问Pod。Service是对一组Pod的一个抽象，通过Pod中定义的labels来选择出相应的Pod，组成一个Service。</p><p>每个Service都会分配一个全局唯一的虚拟IP，称为Cluster IP，并且在该Service的生命周期内，Cluster IP不会改变。同时Service也对Pod做了负载均衡。</p><p>Service的模板定义如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MyApp</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TCP</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9376</span></span></code></pre></div><p>上面的定义选择了所有 <code>app=MyApp</code> 标签的Pod，并且访问该Service的80端口的时候，实际上会去访问Pod的9376端口。</p><h3 id="_4-namespace" tabindex="-1">4. Namespace <a class="header-anchor" href="#_4-namespace" aria-label="Permalink to &quot;4. Namespace&quot;">​</a></h3><p>k8s支持在一个物理集群上分出多个虚拟集群，这就是Namespace。Namespace可用来实现多租户的资源隔离。k8s默认创建的集群有三个：</p><ul><li>default</li><li>kube-public</li><li>kube-system：k8s系统创建的资源位于该namesapce下</li></ul><h3 id="_5-controller" tabindex="-1">5. Controller <a class="header-anchor" href="#_5-controller" aria-label="Permalink to &quot;5. Controller&quot;">​</a></h3><p>k8s通过Controller来管理Pod，Controller中会定义Pod的一些特性，例如副本数等。k8s中提供了多种Controller，用来使用不同的场景。常见的有：</p><ul><li>ReplicaSet：副本管理。主要定义了Pod的期望副本数，选择Pod的Label Selector以及当副本数不足时，用于创建新副本的Pod模板。</li><li>Deployment：Deployment与ReplicaSet比较类似，是ReplicaSet更高一层的抽象，用于管理多个Pod，并确保Pod按照期望的方式运行。</li><li>StatefulSet：用来管理有状态的应用。StatefulSet可以确保所管理的Pod副本在整个生命周期内的名称是不变的，即使销毁了重新创建，也会拥有固定的标识。</li><li>DaemonSet：用于在每个Node上只运行一个Pod副本的场景。</li><li>Job：运行结束后，相应的Pod就会被销毁。</li></ul>`,52),p=[l];function h(k,r,d,o,c,g){return i(),a("div",null,p)}const F=s(t,[["render",h]]);export{u as __pageData,F as default};
